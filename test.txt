.git/hooks/pre-rebase.sample:not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
.git/hooks/pre-rebase.sample:only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
.git/hooks/pre-rebase.sample:only_next_2=`git rev-list ^master           ${publish} | sort`
.git/hooks/pre-rebase.sample:	not_in_topic=`git rev-list "^$topic" master`
.git/hooks/pre-rebase.sample:	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
.git/hooks/pre-rebase.sample:	git rev-list ^master ^topic next
.git/hooks/pre-rebase.sample:	git rev-list ^master        next
.git/hooks/pre-rebase.sample:	git rev-list master..topic
.git/hooks/pre-push.sample:		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
build/obj-mapperPass-so/src/DFGNodeParam.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node.h \
build/obj-mapperPass-so/src/DFGNodeParam.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_base.h \
build/obj-mapperPass-so/src/DFGNodeParam.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_options.h \
build/obj-mapperPass-so/src/MRRG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node.h \
build/obj-mapperPass-so/src/MRRG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_base.h \
build/obj-mapperPass-so/src/MRRG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_options.h \
build/obj-mapperPass-so/src/MRRG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist.h \
build/obj-mapperPass-so/src/MRRG.d: /usr/lib/llvm-12/include/llvm/ADT/simple_ilist.h \
build/obj-mapperPass-so/src/MRRG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_base.h \
build/obj-mapperPass-so/src/MRRG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_iterator.h \
build/obj-mapperPass-so/src/CGRALink.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node.h \
build/obj-mapperPass-so/src/CGRALink.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_base.h \
build/obj-mapperPass-so/src/CGRALink.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_options.h \
build/obj-mapperPass-so/src/CGRALink.d: /usr/lib/llvm-12/include/llvm/ADT/ilist.h \
build/obj-mapperPass-so/src/CGRALink.d: /usr/lib/llvm-12/include/llvm/ADT/simple_ilist.h \
build/obj-mapperPass-so/src/CGRALink.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_base.h \
build/obj-mapperPass-so/src/CGRALink.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_iterator.h \
build/obj-mapperPass-so/src/DFGNodeInst.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node.h \
build/obj-mapperPass-so/src/DFGNodeInst.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_base.h \
build/obj-mapperPass-so/src/DFGNodeInst.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_options.h \
build/obj-mapperPass-so/src/DFGNodeInst.d: /usr/lib/llvm-12/include/llvm/ADT/ilist.h \
build/obj-mapperPass-so/src/DFGNodeInst.d: /usr/lib/llvm-12/include/llvm/ADT/simple_ilist.h \
build/obj-mapperPass-so/src/DFGNodeInst.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_base.h \
build/obj-mapperPass-so/src/DFGNodeInst.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_iterator.h \
build/obj-mapperPass-so/src/CGRANode.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node.h \
build/obj-mapperPass-so/src/CGRANode.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_base.h \
build/obj-mapperPass-so/src/CGRANode.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_options.h \
build/obj-mapperPass-so/src/CGRANode.d: /usr/lib/llvm-12/include/llvm/ADT/ilist.h \
build/obj-mapperPass-so/src/CGRANode.d: /usr/lib/llvm-12/include/llvm/ADT/simple_ilist.h \
build/obj-mapperPass-so/src/CGRANode.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_base.h \
build/obj-mapperPass-so/src/CGRANode.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_iterator.h \
build/obj-mapperPass-so/src/mapperPass.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node.h \
build/obj-mapperPass-so/src/mapperPass.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_base.h \
build/obj-mapperPass-so/src/mapperPass.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_options.h \
build/obj-mapperPass-so/src/mapperPass.d: /usr/lib/llvm-12/include/llvm/ADT/ilist.h \
build/obj-mapperPass-so/src/mapperPass.d: /usr/lib/llvm-12/include/llvm/ADT/simple_ilist.h \
build/obj-mapperPass-so/src/mapperPass.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_base.h \
build/obj-mapperPass-so/src/mapperPass.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_iterator.h \
build/obj-mapperPass-so/src/DFG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node.h \
build/obj-mapperPass-so/src/DFG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_base.h \
build/obj-mapperPass-so/src/DFG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_options.h \
build/obj-mapperPass-so/src/DFG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist.h \
build/obj-mapperPass-so/src/DFG.d: /usr/lib/llvm-12/include/llvm/ADT/simple_ilist.h \
build/obj-mapperPass-so/src/DFG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_base.h \
build/obj-mapperPass-so/src/DFG.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_iterator.h \
build/obj-mapperPass-so/src/CGRA.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node.h \
build/obj-mapperPass-so/src/CGRA.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_base.h \
build/obj-mapperPass-so/src/CGRA.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_node_options.h \
build/obj-mapperPass-so/src/CGRA.d: /usr/lib/llvm-12/include/llvm/ADT/ilist.h \
build/obj-mapperPass-so/src/CGRA.d: /usr/lib/llvm-12/include/llvm/ADT/simple_ilist.h \
build/obj-mapperPass-so/src/CGRA.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_base.h \
build/obj-mapperPass-so/src/CGRA.d: /usr/lib/llvm-12/include/llvm/ADT/ilist_iterator.h \
tools/kconfig/build/obj-conf/confdata.d: confdata.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-conf/build/lexer.lex.d: build/lexer.lex.c lkc.h expr.h list.h lkc_proto.h build/parser.tab.h
tools/kconfig/build/obj-conf/build/parser.tab.d: build/parser.tab.c lkc.h expr.h list.h lkc_proto.h build/parser.tab.h \
tools/kconfig/build/obj-conf/symbol.d: symbol.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-conf/preprocess.d: preprocess.c list.h lkc.h expr.h lkc_proto.h
tools/kconfig/build/obj-conf/util.d: util.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-conf/expr.d: expr.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-conf/conf.d: conf.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-mconf/confdata.d: confdata.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-mconf/build/lexer.lex.d: build/lexer.lex.c lkc.h expr.h list.h lkc_proto.h build/parser.tab.h
tools/kconfig/build/obj-mconf/build/parser.tab.d: build/parser.tab.c lkc.h expr.h list.h lkc_proto.h build/parser.tab.h \
tools/kconfig/build/obj-mconf/symbol.d: symbol.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-mconf/preprocess.d: preprocess.c list.h lkc.h expr.h lkc_proto.h
tools/kconfig/build/obj-mconf/lxdialog/checklist.d:/home/zc/HIT-CGRA-Flow/HIT-CGRA-Mapper/tools/kconfig/build/obj-mconf/lxdialog/checklist.o: \
tools/kconfig/build/obj-mconf/lxdialog/checklist.d: lxdialog/checklist.c lxdialog/dialog.h
tools/kconfig/build/obj-mconf/util.d: util.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-mconf/expr.d: expr.c lkc.h expr.h list.h lkc_proto.h
tools/kconfig/build/obj-mconf/mconf.d: mconf.c lkc.h expr.h list.h lkc_proto.h lxdialog/dialog.h
tools/kconfig/build/parser.tab.c:  YYSYMBOL_stmt_list = 56,                 /* stmt_list  */
tools/kconfig/build/parser.tab.c:  YYSYMBOL_stmt_list_in_choice = 57,       /* stmt_list_in_choice  */
tools/kconfig/build/parser.tab.c:  YYSYMBOL_config_option_list = 62,        /* config_option_list  */
tools/kconfig/build/parser.tab.c:  YYSYMBOL_choice_option_list = 68,        /* choice_option_list  */
tools/kconfig/build/parser.tab.c:  YYSYMBOL_menu_option_list = 81,          /* menu_option_list  */
tools/kconfig/build/parser.tab.c:  YYSYMBOL_comment_option_list = 85,       /* comment_option_list  */
tools/kconfig/build/parser.tab.c:  "T_NOT", "$accept", "input", "mainmenu_stmt", "stmt_list",
tools/kconfig/build/parser.tab.c:  "stmt_list_in_choice", "config_entry_start", "config_stmt",
tools/kconfig/build/parser.tab.c:  "menuconfig_entry_start", "menuconfig_stmt", "config_option_list",
tools/kconfig/build/parser.tab.c:  "choice_option_list", "choice_option", "type", "logic_type", "default",
tools/kconfig/build/parser.tab.c:  "menu_entry", "menu_end", "menu_stmt", "menu_option_list", "source_stmt",
tools/kconfig/build/parser.tab.c:  "comment", "comment_stmt", "comment_option_list", "help_start", "help",
tools/kconfig/build/parser.tab.c:  case 14: /* stmt_list: stmt_list T_WORD error T_EOL  */
tools/kconfig/build/parser.tab.c:  case 15: /* stmt_list: stmt_list error T_EOL  */
tools/kconfig/build/parser.tab.c:  case 20: /* stmt_list_in_choice: stmt_list_in_choice error T_EOL  */
tools/kconfig/build/parser.tab.c:  case 22: /* config_stmt: config_entry_start config_option_list  */
tools/kconfig/build/parser.tab.c:  case 24: /* menuconfig_stmt: menuconfig_entry_start config_option_list  */
tools/kconfig/build/parser.tab.c:	menu_add_option_defconfig_list();
tools/kconfig/build/parser.tab.c:  case 39: /* choice_entry: choice choice_option_list  */
tools/kconfig/build/parser.tab.c:  case 64: /* menu_entry: menu menu_option_list  */
tools/kconfig/build/parser.tab.c:	va_list ap;
tools/kconfig/build/parser.tab.c:	va_list ap;
tools/kconfig/build/parser.tab.c:	menu = rootmenu.list;
tools/kconfig/build/parser.tab.c:		if (menu->list)
tools/kconfig/build/parser.tab.c:			menu = menu->list;
tools/kconfig/build/parser.output:    1 input: mainmenu_stmt stmt_list
tools/kconfig/build/parser.output:    2      | stmt_list
tools/kconfig/build/parser.output:    4 stmt_list: Îµ
tools/kconfig/build/parser.output:    5          | stmt_list assignment_stmt
tools/kconfig/build/parser.output:    6          | stmt_list choice_stmt
tools/kconfig/build/parser.output:    7          | stmt_list comment_stmt
tools/kconfig/build/parser.output:    8          | stmt_list config_stmt
tools/kconfig/build/parser.output:    9          | stmt_list if_stmt
tools/kconfig/build/parser.output:   10          | stmt_list menu_stmt
tools/kconfig/build/parser.output:   11          | stmt_list menuconfig_stmt
tools/kconfig/build/parser.output:   12          | stmt_list source_stmt
tools/kconfig/build/parser.output:   13          | stmt_list T_WORD error T_EOL
tools/kconfig/build/parser.output:   14          | stmt_list error T_EOL
tools/kconfig/build/parser.output:   15 stmt_list_in_choice: Îµ
tools/kconfig/build/parser.output:   16                    | stmt_list_in_choice comment_stmt
tools/kconfig/build/parser.output:   17                    | stmt_list_in_choice config_stmt
tools/kconfig/build/parser.output:   18                    | stmt_list_in_choice if_stmt_in_choice
tools/kconfig/build/parser.output:   19                    | stmt_list_in_choice error T_EOL
tools/kconfig/build/parser.output:   21 config_stmt: config_entry_start config_option_list
tools/kconfig/build/parser.output:   23 menuconfig_stmt: menuconfig_entry_start config_option_list
tools/kconfig/build/parser.output:   24 config_option_list: Îµ
tools/kconfig/build/parser.output:   25                   | config_option_list config_option
tools/kconfig/build/parser.output:   26                   | config_option_list depends
tools/kconfig/build/parser.output:   27                   | config_option_list help
tools/kconfig/build/parser.output:   38 choice_entry: choice choice_option_list
tools/kconfig/build/parser.output:   40 choice_stmt: choice_entry stmt_list_in_choice choice_end
tools/kconfig/build/parser.output:   41 choice_option_list: Îµ
tools/kconfig/build/parser.output:   42                   | choice_option_list choice_option
tools/kconfig/build/parser.output:   43                   | choice_option_list depends
tools/kconfig/build/parser.output:   44                   | choice_option_list help
tools/kconfig/build/parser.output:   60 if_stmt: if_entry stmt_list if_end
tools/kconfig/build/parser.output:   61 if_stmt_in_choice: if_entry stmt_list_in_choice if_end
tools/kconfig/build/parser.output:   63 menu_entry: menu menu_option_list
tools/kconfig/build/parser.output:   65 menu_stmt: menu_entry stmt_list menu_end
tools/kconfig/build/parser.output:   66 menu_option_list: Îµ
tools/kconfig/build/parser.output:   67                 | menu_option_list visible
tools/kconfig/build/parser.output:   68                 | menu_option_list depends
tools/kconfig/build/parser.output:   71 comment_stmt: comment comment_option_list
tools/kconfig/build/parser.output:   72 comment_option_list: Îµ
tools/kconfig/build/parser.output:   73                    | comment_option_list depends
tools/kconfig/build/parser.output:    stmt_list (56)
tools/kconfig/build/parser.output:    stmt_list_in_choice (57)
tools/kconfig/build/parser.output:    config_option_list (62)
tools/kconfig/build/parser.output:    choice_option_list (68)
tools/kconfig/build/parser.output:    menu_option_list (81)
tools/kconfig/build/parser.output:    comment_option_list (85)
tools/kconfig/build/parser.output:    $default  reduce using rule 4 (stmt_list)
tools/kconfig/build/parser.output:    stmt_list      go to state 4
tools/kconfig/build/parser.output:    1 input: mainmenu_stmt â¢ stmt_list
tools/kconfig/build/parser.output:    $default  reduce using rule 4 (stmt_list)
tools/kconfig/build/parser.output:    stmt_list  go to state 7
tools/kconfig/build/parser.output:    2 input: stmt_list â¢
tools/kconfig/build/parser.output:    5 stmt_list: stmt_list â¢ assignment_stmt
tools/kconfig/build/parser.output:    6          | stmt_list â¢ choice_stmt
tools/kconfig/build/parser.output:    7          | stmt_list â¢ comment_stmt
tools/kconfig/build/parser.output:    8          | stmt_list â¢ config_stmt
tools/kconfig/build/parser.output:    9          | stmt_list â¢ if_stmt
tools/kconfig/build/parser.output:   10          | stmt_list â¢ menu_stmt
tools/kconfig/build/parser.output:   11          | stmt_list â¢ menuconfig_stmt
tools/kconfig/build/parser.output:   12          | stmt_list â¢ source_stmt
tools/kconfig/build/parser.output:   13          | stmt_list â¢ T_WORD error T_EOL
tools/kconfig/build/parser.output:   14          | stmt_list â¢ error T_EOL
tools/kconfig/build/parser.output:    1 input: mainmenu_stmt stmt_list â¢
tools/kconfig/build/parser.output:    5 stmt_list: stmt_list â¢ assignment_stmt
tools/kconfig/build/parser.output:    6          | stmt_list â¢ choice_stmt
tools/kconfig/build/parser.output:    7          | stmt_list â¢ comment_stmt
tools/kconfig/build/parser.output:    8          | stmt_list â¢ config_stmt
tools/kconfig/build/parser.output:    9          | stmt_list â¢ if_stmt
tools/kconfig/build/parser.output:   10          | stmt_list â¢ menu_stmt
tools/kconfig/build/parser.output:   11          | stmt_list â¢ menuconfig_stmt
tools/kconfig/build/parser.output:   12          | stmt_list â¢ source_stmt
tools/kconfig/build/parser.output:   13          | stmt_list â¢ T_WORD error T_EOL
tools/kconfig/build/parser.output:   14          | stmt_list â¢ error T_EOL
tools/kconfig/build/parser.output:   14 stmt_list: stmt_list error â¢ T_EOL
tools/kconfig/build/parser.output:   13 stmt_list: stmt_list T_WORD â¢ error T_EOL
tools/kconfig/build/parser.output:   21 config_stmt: config_entry_start â¢ config_option_list
tools/kconfig/build/parser.output:    $default  reduce using rule 24 (config_option_list)
tools/kconfig/build/parser.output:    config_option_list  go to state 54
tools/kconfig/build/parser.output:    8 stmt_list: stmt_list config_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 8 (stmt_list)
tools/kconfig/build/parser.output:   23 menuconfig_stmt: menuconfig_entry_start â¢ config_option_list
tools/kconfig/build/parser.output:    $default  reduce using rule 24 (config_option_list)
tools/kconfig/build/parser.output:    config_option_list  go to state 55
tools/kconfig/build/parser.output:   11 stmt_list: stmt_list menuconfig_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 11 (stmt_list)
tools/kconfig/build/parser.output:   38 choice_entry: choice â¢ choice_option_list
tools/kconfig/build/parser.output:    $default  reduce using rule 41 (choice_option_list)
tools/kconfig/build/parser.output:    choice_option_list  go to state 56
tools/kconfig/build/parser.output:   40 choice_stmt: choice_entry â¢ stmt_list_in_choice choice_end
tools/kconfig/build/parser.output:    $default  reduce using rule 15 (stmt_list_in_choice)
tools/kconfig/build/parser.output:    stmt_list_in_choice  go to state 57
tools/kconfig/build/parser.output:    6 stmt_list: stmt_list choice_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 6 (stmt_list)
tools/kconfig/build/parser.output:   60 if_stmt: if_entry â¢ stmt_list if_end
tools/kconfig/build/parser.output:    $default  reduce using rule 4 (stmt_list)
tools/kconfig/build/parser.output:    stmt_list  go to state 58
tools/kconfig/build/parser.output:    9 stmt_list: stmt_list if_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 9 (stmt_list)
tools/kconfig/build/parser.output:   63 menu_entry: menu â¢ menu_option_list
tools/kconfig/build/parser.output:    $default  reduce using rule 66 (menu_option_list)
tools/kconfig/build/parser.output:    menu_option_list  go to state 59
tools/kconfig/build/parser.output:   65 menu_stmt: menu_entry â¢ stmt_list menu_end
tools/kconfig/build/parser.output:    $default  reduce using rule 4 (stmt_list)
tools/kconfig/build/parser.output:    stmt_list  go to state 60
tools/kconfig/build/parser.output:   10 stmt_list: stmt_list menu_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 10 (stmt_list)
tools/kconfig/build/parser.output:   12 stmt_list: stmt_list source_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 12 (stmt_list)
tools/kconfig/build/parser.output:   71 comment_stmt: comment â¢ comment_option_list
tools/kconfig/build/parser.output:    $default  reduce using rule 72 (comment_option_list)
tools/kconfig/build/parser.output:    comment_option_list  go to state 61
tools/kconfig/build/parser.output:    7 stmt_list: stmt_list comment_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 7 (stmt_list)
tools/kconfig/build/parser.output:    5 stmt_list: stmt_list assignment_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 5 (stmt_list)
tools/kconfig/build/parser.output:   14 stmt_list: stmt_list error T_EOL â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 14 (stmt_list)
tools/kconfig/build/parser.output:   13 stmt_list: stmt_list T_WORD error â¢ T_EOL
tools/kconfig/build/parser.output:   21 config_stmt: config_entry_start config_option_list â¢
tools/kconfig/build/parser.output:   25 config_option_list: config_option_list â¢ config_option
tools/kconfig/build/parser.output:   26                   | config_option_list â¢ depends
tools/kconfig/build/parser.output:   27                   | config_option_list â¢ help
tools/kconfig/build/parser.output:   23 menuconfig_stmt: menuconfig_entry_start config_option_list â¢
tools/kconfig/build/parser.output:   25 config_option_list: config_option_list â¢ config_option
tools/kconfig/build/parser.output:   26                   | config_option_list â¢ depends
tools/kconfig/build/parser.output:   27                   | config_option_list â¢ help
tools/kconfig/build/parser.output:   38 choice_entry: choice choice_option_list â¢
tools/kconfig/build/parser.output:   42 choice_option_list: choice_option_list â¢ choice_option
tools/kconfig/build/parser.output:   43                   | choice_option_list â¢ depends
tools/kconfig/build/parser.output:   44                   | choice_option_list â¢ help
tools/kconfig/build/parser.output:   16 stmt_list_in_choice: stmt_list_in_choice â¢ comment_stmt
tools/kconfig/build/parser.output:   17                    | stmt_list_in_choice â¢ config_stmt
tools/kconfig/build/parser.output:   18                    | stmt_list_in_choice â¢ if_stmt_in_choice
tools/kconfig/build/parser.output:   19                    | stmt_list_in_choice â¢ error T_EOL
tools/kconfig/build/parser.output:   40 choice_stmt: choice_entry stmt_list_in_choice â¢ choice_end
tools/kconfig/build/parser.output:    5 stmt_list: stmt_list â¢ assignment_stmt
tools/kconfig/build/parser.output:    6          | stmt_list â¢ choice_stmt
tools/kconfig/build/parser.output:    7          | stmt_list â¢ comment_stmt
tools/kconfig/build/parser.output:    8          | stmt_list â¢ config_stmt
tools/kconfig/build/parser.output:    9          | stmt_list â¢ if_stmt
tools/kconfig/build/parser.output:   10          | stmt_list â¢ menu_stmt
tools/kconfig/build/parser.output:   11          | stmt_list â¢ menuconfig_stmt
tools/kconfig/build/parser.output:   12          | stmt_list â¢ source_stmt
tools/kconfig/build/parser.output:   13          | stmt_list â¢ T_WORD error T_EOL
tools/kconfig/build/parser.output:   14          | stmt_list â¢ error T_EOL
tools/kconfig/build/parser.output:   60 if_stmt: if_entry stmt_list â¢ if_end
tools/kconfig/build/parser.output:   63 menu_entry: menu menu_option_list â¢
tools/kconfig/build/parser.output:   67 menu_option_list: menu_option_list â¢ visible
tools/kconfig/build/parser.output:   68                 | menu_option_list â¢ depends
tools/kconfig/build/parser.output:    5 stmt_list: stmt_list â¢ assignment_stmt
tools/kconfig/build/parser.output:    6          | stmt_list â¢ choice_stmt
tools/kconfig/build/parser.output:    7          | stmt_list â¢ comment_stmt
tools/kconfig/build/parser.output:    8          | stmt_list â¢ config_stmt
tools/kconfig/build/parser.output:    9          | stmt_list â¢ if_stmt
tools/kconfig/build/parser.output:   10          | stmt_list â¢ menu_stmt
tools/kconfig/build/parser.output:   11          | stmt_list â¢ menuconfig_stmt
tools/kconfig/build/parser.output:   12          | stmt_list â¢ source_stmt
tools/kconfig/build/parser.output:   13          | stmt_list â¢ T_WORD error T_EOL
tools/kconfig/build/parser.output:   14          | stmt_list â¢ error T_EOL
tools/kconfig/build/parser.output:   65 menu_stmt: menu_entry stmt_list â¢ menu_end
tools/kconfig/build/parser.output:   71 comment_stmt: comment comment_option_list â¢
tools/kconfig/build/parser.output:   73 comment_option_list: comment_option_list â¢ depends
tools/kconfig/build/parser.output:   13 stmt_list: stmt_list T_WORD error T_EOL â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 13 (stmt_list)
tools/kconfig/build/parser.output:   25 config_option_list: config_option_list config_option â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 25 (config_option_list)
tools/kconfig/build/parser.output:   27 config_option_list: config_option_list help â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 27 (config_option_list)
tools/kconfig/build/parser.output:   26 config_option_list: config_option_list depends â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 26 (config_option_list)
tools/kconfig/build/parser.output:   42 choice_option_list: choice_option_list choice_option â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 42 (choice_option_list)
tools/kconfig/build/parser.output:   44 choice_option_list: choice_option_list help â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 44 (choice_option_list)
tools/kconfig/build/parser.output:   43 choice_option_list: choice_option_list depends â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 43 (choice_option_list)
tools/kconfig/build/parser.output:   19 stmt_list_in_choice: stmt_list_in_choice error â¢ T_EOL
tools/kconfig/build/parser.output:   17 stmt_list_in_choice: stmt_list_in_choice config_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 17 (stmt_list_in_choice)
tools/kconfig/build/parser.output:   40 choice_stmt: choice_entry stmt_list_in_choice choice_end â¢
tools/kconfig/build/parser.output:   61 if_stmt_in_choice: if_entry â¢ stmt_list_in_choice if_end
tools/kconfig/build/parser.output:    $default  reduce using rule 15 (stmt_list_in_choice)
tools/kconfig/build/parser.output:    stmt_list_in_choice  go to state 160
tools/kconfig/build/parser.output:   18 stmt_list_in_choice: stmt_list_in_choice if_stmt_in_choice â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 18 (stmt_list_in_choice)
tools/kconfig/build/parser.output:   16 stmt_list_in_choice: stmt_list_in_choice comment_stmt â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 16 (stmt_list_in_choice)
tools/kconfig/build/parser.output:   60 if_stmt: if_entry stmt_list if_end â¢
tools/kconfig/build/parser.output:   68 menu_option_list: menu_option_list depends â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 68 (menu_option_list)
tools/kconfig/build/parser.output:   67 menu_option_list: menu_option_list visible â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 67 (menu_option_list)
tools/kconfig/build/parser.output:   65 menu_stmt: menu_entry stmt_list menu_end â¢
tools/kconfig/build/parser.output:   73 comment_option_list: comment_option_list depends â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 73 (comment_option_list)
tools/kconfig/build/parser.output:   19 stmt_list_in_choice: stmt_list_in_choice error T_EOL â¢
tools/kconfig/build/parser.output:    $default  reduce using rule 19 (stmt_list_in_choice)
tools/kconfig/build/parser.output:   16 stmt_list_in_choice: stmt_list_in_choice â¢ comment_stmt
tools/kconfig/build/parser.output:   17                    | stmt_list_in_choice â¢ config_stmt
tools/kconfig/build/parser.output:   18                    | stmt_list_in_choice â¢ if_stmt_in_choice
tools/kconfig/build/parser.output:   19                    | stmt_list_in_choice â¢ error T_EOL
tools/kconfig/build/parser.output:   61 if_stmt_in_choice: if_entry stmt_list_in_choice â¢ if_end
tools/kconfig/build/parser.output:   61 if_stmt_in_choice: if_entry stmt_list_in_choice if_end â¢
tools/kconfig/confdata.c:	va_list ap;
tools/kconfig/confdata.c:	va_list ap;
tools/kconfig/confdata.c:		if (!sym_defconfig_list)
tools/kconfig/confdata.c:		for_all_defaults(sym_defconfig_list, prop) {
tools/kconfig/confdata.c:	menu = rootmenu.list;
tools/kconfig/confdata.c:		if (menu->list != NULL) {
tools/kconfig/confdata.c:			menu = menu->list;
tools/kconfig/confdata.c:	menu = rootmenu.list;
tools/kconfig/confdata.c:		if (menu->list) {
tools/kconfig/confdata.c:			menu = menu->list;
tools/kconfig/confdata.c:	for (file = file_list; file; file = file->next) {
tools/kconfig/confdata.c:	expr_list_for_each_sym(prop->expr, e, sym)
tools/kconfig/confdata.c:	expr_list_for_each_sym(prop->expr, e, sym) {
tools/kconfig/confdata.c:	expr_list_for_each_sym(prop->expr, e, sym) {
tools/kconfig/lxdialog/dialog.h:struct subtitle_list {
tools/kconfig/lxdialog/dialog.h:	struct subtitle_list *next;
tools/kconfig/lxdialog/dialog.h:	struct subtitle_list *subtitles;
tools/kconfig/lxdialog/dialog.h:/* item list as used by checklist and menubox */
tools/kconfig/lxdialog/dialog.h:/* item list manipulation for lxdialog use */
tools/kconfig/lxdialog/dialog.h:	void *data;	/* pointer to menu item - used by menubox+checklist */
tools/kconfig/lxdialog/dialog.h:/* list of lialog_items */
tools/kconfig/lxdialog/dialog.h:struct dialog_list {
tools/kconfig/lxdialog/dialog.h:	struct dialog_list *next;
tools/kconfig/lxdialog/dialog.h:extern struct dialog_list *item_cur;
tools/kconfig/lxdialog/dialog.h:extern struct dialog_list item_nil;
tools/kconfig/lxdialog/dialog.h:extern struct dialog_list *item_head;
tools/kconfig/lxdialog/dialog.h:#define CHECKLIST_HEIGTH_MIN 6	/* For dialog_checklist() */
tools/kconfig/lxdialog/dialog.h:void set_dialog_subtitles(struct subtitle_list *subtitles);
tools/kconfig/lxdialog/dialog.h:int dialog_checklist(const char *title, const char *prompt, int height,
tools/kconfig/lxdialog/dialog.h:		     int width, int list_height);
tools/kconfig/lxdialog/util.c:		struct subtitle_list *pos;
tools/kconfig/lxdialog/util.c:void set_dialog_subtitles(struct subtitle_list *subtitles)
tools/kconfig/lxdialog/util.c:struct dialog_list *item_cur;
tools/kconfig/lxdialog/util.c:struct dialog_list item_nil;
tools/kconfig/lxdialog/util.c:struct dialog_list *item_head;
tools/kconfig/lxdialog/util.c:	struct dialog_list *p, *next;
tools/kconfig/lxdialog/util.c:	va_list ap;
tools/kconfig/lxdialog/util.c:	struct dialog_list *p = malloc(sizeof(*p));
tools/kconfig/lxdialog/util.c:	va_list ap;
tools/kconfig/lxdialog/util.c:	struct dialog_list *p;
tools/kconfig/lxdialog/util.c:	struct dialog_list *p;
tools/kconfig/lxdialog/checklist.c: *  checklist.c -- implements the checklist box
tools/kconfig/lxdialog/checklist.c: *     Stuart Herbert - S.Herbert@sheffield.ac.uk: radiolist extension
tools/kconfig/lxdialog/checklist.c:static int list_width, check_x, item_x;
tools/kconfig/lxdialog/checklist.c: * Print list item
tools/kconfig/lxdialog/checklist.c:	char *list_item = malloc(list_width + 1);
tools/kconfig/lxdialog/checklist.c:	strncpy(list_item, item_str(), list_width - item_x);
tools/kconfig/lxdialog/checklist.c:	list_item[list_width - item_x] = '\0';
tools/kconfig/lxdialog/checklist.c:	for (i = 0; i < list_width; i++)
tools/kconfig/lxdialog/checklist.c:	mvwaddch(win, choice, item_x, list_item[0]);
tools/kconfig/lxdialog/checklist.c:	waddstr(win, list_item + 1);
tools/kconfig/lxdialog/checklist.c:	free(list_item);
tools/kconfig/lxdialog/checklist.c: * Display a dialog box with a list of options that can be turned on or off
tools/kconfig/lxdialog/checklist.c: * in the style of radiolist (only one option turned on at a time).
tools/kconfig/lxdialog/checklist.c:int dialog_checklist(const char *title, const char *prompt, int height,
tools/kconfig/lxdialog/checklist.c:		     int width, int list_height)
tools/kconfig/lxdialog/checklist.c:	WINDOW *dialog, *list;
tools/kconfig/lxdialog/checklist.c:	max_choice = MIN(list_height, item_count());
tools/kconfig/lxdialog/checklist.c:	list_width = width - 6;
tools/kconfig/lxdialog/checklist.c:	box_y = height - list_height - 5;
tools/kconfig/lxdialog/checklist.c:	box_x = (width - list_width) / 2 - 1;
tools/kconfig/lxdialog/checklist.c:	/* create new window for the list */
tools/kconfig/lxdialog/checklist.c:	list = subwin(dialog, list_height, list_width, y + box_y + 1,
tools/kconfig/lxdialog/checklist.c:	keypad(list, TRUE);
tools/kconfig/lxdialog/checklist.c:	/* draw a box around the list items */
tools/kconfig/lxdialog/checklist.c:	draw_box(dialog, box_y, box_x, list_height + 2, list_width + 2,
tools/kconfig/lxdialog/checklist.c:	/* Find length of longest item in order to center checklist */
tools/kconfig/lxdialog/checklist.c:	check_x = MIN(check_x, list_width);
tools/kconfig/lxdialog/checklist.c:	check_x = (list_width - check_x) / 2;
tools/kconfig/lxdialog/checklist.c:	if (choice >= list_height) {
tools/kconfig/lxdialog/checklist.c:		scroll = choice - list_height + 1;
tools/kconfig/lxdialog/checklist.c:	/* Print the list */
tools/kconfig/lxdialog/checklist.c:		print_item(list, i, i == choice);
tools/kconfig/lxdialog/checklist.c:		     box_y, box_x + check_x + 5, list_height);
tools/kconfig/lxdialog/checklist.c:	wnoutrefresh(list);
tools/kconfig/lxdialog/checklist.c:					/* Scroll list down */
tools/kconfig/lxdialog/checklist.c:					if (list_height > 1) {
tools/kconfig/lxdialog/checklist.c:						print_item(list, 0, FALSE);
tools/kconfig/lxdialog/checklist.c:						scrollok(list, TRUE);
tools/kconfig/lxdialog/checklist.c:						wscrl(list, -1);
tools/kconfig/lxdialog/checklist.c:						scrollok(list, FALSE);
tools/kconfig/lxdialog/checklist.c:					print_item(list, 0, TRUE);
tools/kconfig/lxdialog/checklist.c:						     scroll, box_y, box_x + check_x + 5, list_height);
tools/kconfig/lxdialog/checklist.c:					wrefresh(list);
tools/kconfig/lxdialog/checklist.c:					/* Scroll list up */
tools/kconfig/lxdialog/checklist.c:					if (list_height > 1) {
tools/kconfig/lxdialog/checklist.c:						print_item(list,
tools/kconfig/lxdialog/checklist.c:						scrollok(list, TRUE);
tools/kconfig/lxdialog/checklist.c:						wscrl(list, 1);
tools/kconfig/lxdialog/checklist.c:						scrollok(list, FALSE);
tools/kconfig/lxdialog/checklist.c:					print_item(list, max_choice - 1, TRUE);
tools/kconfig/lxdialog/checklist.c:						     scroll, box_y, box_x + check_x + 5, list_height);
tools/kconfig/lxdialog/checklist.c:					wrefresh(list);
tools/kconfig/lxdialog/checklist.c:				print_item(list, choice, FALSE);
tools/kconfig/lxdialog/checklist.c:				print_item(list, choice, TRUE);
tools/kconfig/lxdialog/checklist.c:				wrefresh(list);
tools/kconfig/lxdialog/checklist.c:			delwin(list);
tools/kconfig/lxdialog/checklist.c:			delwin(list);
tools/kconfig/lxdialog/checklist.c:	delwin(list);
tools/kconfig/lkc.h:void menu_add_option_defconfig_list(void);
tools/kconfig/lkc.h:struct gstr get_relations_str(struct symbol **sym_arr, struct list_head *head);
tools/kconfig/expr.h:#include "list.h"
tools/kconfig/expr.h:#define expr_list_for_each_sym(l, e, s) \
tools/kconfig/expr.h: * list of property types!
tools/kconfig/expr.h:	struct menu *list;
tools/kconfig/expr.h:	struct list_head entries;
tools/kconfig/expr.h:extern struct file *file_list;
tools/kconfig/expr.h:extern struct symbol *sym_defconfig_list;
tools/kconfig/preprocess.c:#include "list.h"
tools/kconfig/preprocess.c:	va_list ap;
tools/kconfig/preprocess.c:static LIST_HEAD(env_list);
tools/kconfig/preprocess.c:	struct list_head node;
tools/kconfig/preprocess.c:	list_add_tail(&e->node, &env_list);
tools/kconfig/preprocess.c:	list_del(&e->node);
tools/kconfig/preprocess.c:	list_for_each_entry(e, &env_list, node) {
tools/kconfig/preprocess.c:	list_for_each_entry_safe(e, tmp, &env_list, node) {
tools/kconfig/preprocess.c:static LIST_HEAD(variable_list);
tools/kconfig/preprocess.c:	struct list_head node;
tools/kconfig/preprocess.c:	list_for_each_entry(v, &variable_list, node) {
tools/kconfig/preprocess.c:		list_add_tail(&v->node, &variable_list);
tools/kconfig/preprocess.c:	list_del(&v->node);
tools/kconfig/preprocess.c:	list_for_each_entry_safe(v, tmp, &variable_list, node)
tools/kconfig/util.c:/* file already present in list? If not add it */
tools/kconfig/util.c:	for (file = file_list; file; file = file->next) {
tools/kconfig/util.c:	file->next = file_list;
tools/kconfig/util.c:	file_list = file;
tools/kconfig/util.c:	va_list ap;
tools/kconfig/symbol.c:struct symbol *sym_defconfig_list;
tools/kconfig/symbol.c:	expr_list_for_each_sym(prop->expr, e, def_sym)
tools/kconfig/symbol.c:	expr_list_for_each_sym(prop->expr, e, def_sym) {
tools/kconfig/symbol.c:		expr_list_for_each_sym(prop->expr, e, choice_sym) {
tools/kconfig/symbol.c:	expr_list_for_each_sym(prop->expr, e, sym)
tools/kconfig/symbol.c:	expr_list_for_each_sym(prop->expr, e, sym) {
tools/kconfig/symbol.c:	expr_list_for_each_sym(prop->expr, e, sym)
tools/kconfig/conf.c:	listnewconfig,
tools/kconfig/conf.c:		for (child = menu->list; child; child = child->next) {
tools/kconfig/conf.c:		for (child = menu->list; child; child = child->next) {
tools/kconfig/conf.c:		for (child = child->list; child; child = child->next) {
tools/kconfig/conf.c:	for (child = menu->list; child; child = child->next)
tools/kconfig/conf.c:			if (input_mode == listnewconfig) {
tools/kconfig/conf.c:	for (child = menu->list; child; child = child->next)
tools/kconfig/conf.c:	{"listnewconfig",   no_argument,       NULL, listnewconfig},
tools/kconfig/conf.c:	printf("  --listnewconfig         List new options\n");
tools/kconfig/conf.c:		case listnewconfig:
tools/kconfig/conf.c:	case listnewconfig:
tools/kconfig/conf.c:	case listnewconfig:
tools/kconfig/conf.c:	} else if (input_mode != listnewconfig && input_mode != helpnewconfig) {
tools/kconfig/parser.y:input: mainmenu_stmt stmt_list | stmt_list;
tools/kconfig/parser.y:stmt_list:
tools/kconfig/parser.y:	| stmt_list assignment_stmt
tools/kconfig/parser.y:	| stmt_list choice_stmt
tools/kconfig/parser.y:	| stmt_list comment_stmt
tools/kconfig/parser.y:	| stmt_list config_stmt
tools/kconfig/parser.y:	| stmt_list if_stmt
tools/kconfig/parser.y:	| stmt_list menu_stmt
tools/kconfig/parser.y:	| stmt_list menuconfig_stmt
tools/kconfig/parser.y:	| stmt_list source_stmt
tools/kconfig/parser.y:	| stmt_list T_WORD error T_EOL	{ zconf_error("unknown statement \"%s\"", $2); }
tools/kconfig/parser.y:	| stmt_list error T_EOL		{ zconf_error("invalid statement"); }
tools/kconfig/parser.y:stmt_list_in_choice:
tools/kconfig/parser.y:	| stmt_list_in_choice comment_stmt
tools/kconfig/parser.y:	| stmt_list_in_choice config_stmt
tools/kconfig/parser.y:	| stmt_list_in_choice if_stmt_in_choice
tools/kconfig/parser.y:	| stmt_list_in_choice error T_EOL	{ zconf_error("invalid statement"); }
tools/kconfig/parser.y:config_stmt: config_entry_start config_option_list
tools/kconfig/parser.y:menuconfig_stmt: menuconfig_entry_start config_option_list
tools/kconfig/parser.y:config_option_list:
tools/kconfig/parser.y:	| config_option_list config_option
tools/kconfig/parser.y:	| config_option_list depends
tools/kconfig/parser.y:	| config_option_list help
tools/kconfig/parser.y:	menu_add_option_defconfig_list();
tools/kconfig/parser.y:choice_entry: choice choice_option_list
tools/kconfig/parser.y:choice_stmt: choice_entry stmt_list_in_choice choice_end
tools/kconfig/parser.y:choice_option_list:
tools/kconfig/parser.y:	| choice_option_list choice_option
tools/kconfig/parser.y:	| choice_option_list depends
tools/kconfig/parser.y:	| choice_option_list help
tools/kconfig/parser.y:if_stmt: if_entry stmt_list if_end
tools/kconfig/parser.y:if_stmt_in_choice: if_entry stmt_list_in_choice if_end
tools/kconfig/parser.y:menu_entry: menu menu_option_list
tools/kconfig/parser.y:menu_stmt: menu_entry stmt_list menu_end
tools/kconfig/parser.y:menu_option_list:
tools/kconfig/parser.y:	| menu_option_list visible
tools/kconfig/parser.y:	| menu_option_list depends
tools/kconfig/parser.y:comment_stmt: comment comment_option_list
tools/kconfig/parser.y:comment_option_list:
tools/kconfig/parser.y:	| comment_option_list depends
tools/kconfig/parser.y:	va_list ap;
tools/kconfig/parser.y:	va_list ap;
tools/kconfig/parser.y:	menu = rootmenu.list;
tools/kconfig/parser.y:		if (menu->list)
tools/kconfig/parser.y:			menu = menu->list;
tools/kconfig/menu.c:struct file *file_list;
tools/kconfig/menu.c:	va_list ap;
tools/kconfig/menu.c:	va_list ap;
tools/kconfig/menu.c:	last_entry_ptr = &rootmenu.list;
tools/kconfig/menu.c:	last_entry_ptr = &current_entry->list;
tools/kconfig/menu.c:	/* append property to the prop list of symbol */
tools/kconfig/menu.c:void menu_add_option_defconfig_list(void)
tools/kconfig/menu.c:	if (!sym_defconfig_list)
tools/kconfig/menu.c:		sym_defconfig_list = current_entry->sym;
tools/kconfig/menu.c:	else if (sym_defconfig_list != current_entry->sym)
tools/kconfig/menu.c:	sym_defconfig_list->flags |= SYMBOL_NO_WRITE;
tools/kconfig/menu.c:	if (parent->list) {
tools/kconfig/menu.c:				for (menu = parent->list; menu; menu = menu->next) {
tools/kconfig/menu.c:			for (menu = parent->list; menu; menu = menu->next) {
tools/kconfig/menu.c:		for (menu = parent->list; menu; menu = menu->next) {
tools/kconfig/menu.c:				 * too in the symbol's own property list
tools/kconfig/menu.c:		for (menu = parent->list; menu; menu = menu->next)
tools/kconfig/menu.c:			parent->list = parent->next;
tools/kconfig/menu.c:	for (menu = parent->list; menu; menu = menu->next) {
tools/kconfig/menu.c:		if (menu->list && (!menu->prompt || !menu->prompt->text)) {
tools/kconfig/menu.c:			for (last_menu = menu->list; ; last_menu = last_menu->next) {
tools/kconfig/menu.c:			menu->next = menu->list;
tools/kconfig/menu.c:			menu->list = NULL;
tools/kconfig/menu.c:	for (child = menu->list; child; child = child->next) {
tools/kconfig/menu.c:	for (child = menu->list; child; child = child->next) {
tools/kconfig/menu.c:			   struct list_head *head)
tools/kconfig/menu.c:		if (list_empty(head))
tools/kconfig/menu.c:			jump->index = list_entry(head->prev, struct jump_key,
tools/kconfig/menu.c:		list_add_tail(&jump->entries, head);
tools/kconfig/menu.c:		    struct list_head *head)
tools/kconfig/menu.c:struct gstr get_relations_str(struct symbol **sym_arr, struct list_head *head)
tools/kconfig/lexer.l:"defconfig_list"	return T_DEFCONFIG_LIST;
tools/kconfig/mconf.c:"Radiolists  (Choice lists)\n"
tools/kconfig/mconf.c:"If you prefer to have all of the options listed in a single menu,\n"
tools/kconfig/mconf.c:radiolist_instructions[] =
tools/kconfig/mconf.c:	struct list_head entries;
tools/kconfig/mconf.c:static struct subtitle_list *subtitles;
tools/kconfig/mconf.c:	struct subtitle_list *pos, *tmp;
tools/kconfig/mconf.c:	list_for_each_entry(sp, &trail, entries) {
tools/kconfig/mconf.c:	struct subtitle_list *pos, *tmp;
tools/kconfig/mconf.c:	struct list_head *head;
tools/kconfig/mconf.c:	list_for_each_entry(pos, data->head, entries) {
tools/kconfig/mconf.c:	list_add_tail(&stpart.entries, &trail);
tools/kconfig/mconf.c:		list_for_each_entry_safe(pos, tmp, &head, entries)
tools/kconfig/mconf.c:	list_del(trail.prev);
tools/kconfig/mconf.c:		for (child = menu->list; child; child = child->next) {
tools/kconfig/mconf.c:				if (def_menu->list) {
tools/kconfig/mconf.c:	for (child = menu->list; child; child = child->next)
tools/kconfig/mconf.c:	list_add_tail(&stpart.entries, &trail);
tools/kconfig/mconf.c:	list_del(trail.prev);
tools/kconfig/mconf.c:		for (child = menu->list; child; child = child->next) {
tools/kconfig/mconf.c:		res = dialog_checklist(prompt ? prompt : "Main Menu",
tools/kconfig/mconf.c:					radiolist_instructions,
tools/kconfig/list.h:struct list_head {
tools/kconfig/list.h:	struct list_head *next, *prev;
tools/kconfig/list.h:	struct list_head name = LIST_HEAD_INIT(name)
tools/kconfig/list.h: * list_entry - get the struct for this entry
tools/kconfig/list.h: * @ptr:	the &struct list_head pointer.
tools/kconfig/list.h: * @member:	the name of the list_head within the struct.
tools/kconfig/list.h:#define list_entry(ptr, type, member) \
tools/kconfig/list.h: * list_for_each_entry	-	iterate over list of given type
tools/kconfig/list.h: * @head:	the head for your list.
tools/kconfig/list.h: * @member:	the name of the list_head within the struct.
tools/kconfig/list.h:#define list_for_each_entry(pos, head, member)				\
tools/kconfig/list.h:	for (pos = list_entry((head)->next, typeof(*pos), member);	\
tools/kconfig/list.h:	     pos = list_entry(pos->member.next, typeof(*pos), member))
tools/kconfig/list.h: * list_for_each_entry_safe - iterate over list of given type safe against removal of list entry
tools/kconfig/list.h: * @head:	the head for your list.
tools/kconfig/list.h: * @member:	the name of the list_head within the struct.
tools/kconfig/list.h:#define list_for_each_entry_safe(pos, n, head, member)			\
tools/kconfig/list.h:	for (pos = list_entry((head)->next, typeof(*pos), member),	\
tools/kconfig/list.h:		n = list_entry(pos->member.next, typeof(*pos), member);	\
tools/kconfig/list.h:	     pos = n, n = list_entry(n->member.next, typeof(*n), member))
tools/kconfig/list.h: * list_empty - tests whether a list is empty
tools/kconfig/list.h: * @head: the list to test.
tools/kconfig/list.h:static inline int list_empty(const struct list_head *head)
tools/kconfig/list.h: * This is only for internal list manipulation where we know
tools/kconfig/list.h:static inline void __list_add(struct list_head *_new,
tools/kconfig/list.h:			      struct list_head *prev,
tools/kconfig/list.h:			      struct list_head *next)
tools/kconfig/list.h: * list_add_tail - add a new entry
tools/kconfig/list.h: * @head: list head to add it before
tools/kconfig/list.h:static inline void list_add_tail(struct list_head *_new, struct list_head *head)
tools/kconfig/list.h:	__list_add(_new, head->prev, head);
tools/kconfig/list.h: * Delete a list entry by making the prev/next entries
tools/kconfig/list.h: * This is only for internal list manipulation where we know
tools/kconfig/list.h:static inline void __list_del(struct list_head *prev, struct list_head *next)
tools/kconfig/list.h: * list_del - deletes entry from list.
tools/kconfig/list.h: * @entry: the element to delete from the list.
tools/kconfig/list.h: * Note: list_empty() on entry does not return true after this, the entry is
tools/kconfig/list.h:static inline void list_del(struct list_head *entry)
tools/kconfig/list.h:	__list_del(entry->prev, entry->next);
tools/kconfig/list.h:	entry->next = (struct list_head*)LIST_POISON1;
tools/kconfig/list.h:	entry->prev = (struct list_head*)LIST_POISON2;
src/mapperPass.cpp:void addDefaultKernels(map<string, list<int>*>*);
src/DFG.cpp: * 1. delete the DFGNodes in nodes list
src/DFG.cpp:				list<DFGNodeInst*>::iterator inst_node_it;
src/DFG.cpp:				list<DFGNodeConst*>::iterator const_node_it;
src/DFG.cpp:				list<DFGEdge*>::iterator edge_it;
LICENSE:   list of conditions and the following disclaimer.
LICENSE:   this list of conditions and the following disclaimer in the documentation
include/DFGNode.h:#include <list>
include/DFGNode.h:		/**the list to save the pointers of input DFGEdges
include/DFGNode.h:    list<DFGEdge*> m_inEdges;
include/DFGNode.h:		/**the list to save the pointers of output DFGEdges
include/DFGNode.h:    list<DFGEdge*> m_outEdges;
include/json.h:#include <initializer_list> // initializer_list
include/json.h:#include <forward_list> // forward_list
include/json.h:json.exception.type_error.301 | cannot create object from initializer list | To create an object from an initializer list, the initializer list must consist only of a list of pairs whose first element is a string. When this constraint is violated, an array is created instead.
include/json.h:// forward_list doesn't have an insert method
include/json.h:void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)
include/json.h:#include <initializer_list> // initializer_list
include/json.h:    @param[in] ranges  list of integers; interpreted as list of pairs of
include/json.h:    @pre The passed list @a ranges must have 2, 4, or 6 elements; that is,
include/json.h:    bool next_byte_in_range(std::initializer_list<char_int_type> ranges)
include/json.h:    table below, "anything" means any character but the ones listed before.
include/json.h:        if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/false)))
include/json.h:    @brief Read a BSON element list (as specified in the BSON-spec)
include/json.h:    @param[in] is_array Determines if the element list being read is to be
include/json.h:    bool parse_bson_element_list(const bool is_array)
include/json.h:            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "element list")))
include/json.h:        if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/true)))
include/json.h:                single value; that is, with an empty list of reference tokens.
include/json.h:#include <initializer_list>
include/json.h:    json_ref(std::initializer_list<json_ref> init)
include/json.h:#include <initializer_list> // initializer_list
include/json.h:    ordered_map(std::initializer_list<T> init, const Allocator& alloc = Allocator() )
include/json.h:    /// helper type for initializer lists of basic_json values
include/json.h:    using initializer_list_t = std::initializer_list<detail::json_ref<basic_json>>;
include/json.h:    `std::list`)
include/json.h:      `std::vector`, `std::deque`, `std::list`, `std::forward_list`,
include/json.h:    @brief create a container (array or object) from an initializer list
include/json.h:    list @a init. In case @a type_deduction is `true` (default), the type of
include/json.h:    the JSON value to be created is deducted from the initializer list @a init
include/json.h:    1. If the list is empty, an empty JSON object value `{}` is created.
include/json.h:    2. If the list consists of pairs whose first element is a string, a JSON
include/json.h:    The rules aim to create the best fit between a C++ initializer list and
include/json.h:    1. The empty initializer list is written as `{}` which is exactly an empty
include/json.h:    2. C++ has no way of describing mapped types other than to list a list of
include/json.h:       weakest constraint one can pose on initializer lists to interpret them
include/json.h:    3. In all other cases, the initializer list could not be interpreted as
include/json.h:    expressed by an initializer list:
include/json.h:    - the empty array (`[]`): use @ref array(initializer_list_t)
include/json.h:      with an empty initializer list in this case
include/json.h:      array(initializer_list_t) with the same initializer list
include/json.h:    @note When used without parentheses around an empty initializer list, @ref
include/json.h:    @param[in] init  initializer list with JSON values
include/json.h:    of the JSON value is deducted from the initializer list @a init; when set
include/json.h:    used by the functions @ref array(initializer_list_t) and
include/json.h:    @ref object(initializer_list_t).
include/json.h:    would have been created. See @ref object(initializer_list_t)
include/json.h:    @complexity Linear in the size of the initializer list @a init.
include/json.h:    initializer lists.,basic_json__list_init_t}
include/json.h:    @sa see @ref array(initializer_list_t) -- create a JSON array
include/json.h:    value from an initializer list
include/json.h:    @sa see @ref object(initializer_list_t) -- create a JSON object
include/json.h:    value from an initializer list
include/json.h:    basic_json(initializer_list_t init,
include/json.h:                JSON_THROW(type_error::create(301, "cannot create object from initializer list", basic_json()));
include/json.h:            // the initializer list is a list of pairs -> create object
include/json.h:            // the initializer list describes an array -> create array
include/json.h:    @brief explicitly create an array from an initializer list
include/json.h:    Creates a JSON array value from a given initializer list. That is, given a
include/json.h:    list of values `a, b, c`, creates the JSON value `[a, b, c]`. If the
include/json.h:    initializer list is empty, the empty array `[]` is created.
include/json.h:    be realized with the initializer list constructor (@ref
include/json.h:    basic_json(initializer_list_t, bool, value_t)). These cases
include/json.h:    string -- in this case, the initializer list constructor would create an
include/json.h:    2. creating an empty array -- passing the empty initializer list to the
include/json.h:    initializer list constructor yields an empty object
include/json.h:    @param[in] init  initializer list with JSON values to create an array from
include/json.h:    @sa see @ref basic_json(initializer_list_t, bool, value_t) --
include/json.h:    create a JSON value from an initializer list
include/json.h:    @sa see @ref object(initializer_list_t) -- create a JSON object
include/json.h:    value from an initializer list
include/json.h:    static basic_json array(initializer_list_t init = {})
include/json.h:    @brief explicitly create an object from an initializer list
include/json.h:    Creates a JSON object value from a given initializer list. The initializer
include/json.h:    lists elements must be pairs, and their first elements must be strings. If
include/json.h:    the initializer list is empty, the empty object `{}` is created.
include/json.h:    related function @ref array(initializer_list_t), there are
include/json.h:    initializer list @a init can also be passed to the initializer list
include/json.h:    constructor @ref basic_json(initializer_list_t, bool, value_t).
include/json.h:    @param[in] init  initializer list to create an object from (optional)
include/json.h:    @throw type_error.301 if @a init is not a list of pairs whose first
include/json.h:    value is passed to @ref basic_json(initializer_list_t, bool, value_t),
include/json.h:    an array would have been created from the passed initializer list @a init.
include/json.h:    @sa see @ref basic_json(initializer_list_t, bool, value_t) --
include/json.h:    create a JSON value from an initializer list
include/json.h:    @sa see @ref array(initializer_list_t) -- create a JSON array
include/json.h:    value from an initializer list
include/json.h:    static basic_json object(initializer_list_t init = {})
include/json.h:    as well as an initializer list of this type is excluded to avoid
include/json.h:                                        detail::negation<std::is_same<ValueType, std::initializer_list<typename string_t::value_type>>>,
include/json.h:    This function allows to use `push_back` with an initializer list. In case
include/json.h:    2. the initializer list @a init contains only two elements, and
include/json.h:    @param[in] init  an initializer list
include/json.h:    @complexity Linear in the size of the initializer list @a init.
include/json.h:          `object_t::value_type` or `std::initializer_list<basic_json>`, see
include/json.h:    @liveexample{The example shows how initializer lists are treated as
include/json.h:    objects when possible.,push_back__initializer_list}
include/json.h:    void push_back(initializer_list_t init)
include/json.h:    @copydoc push_back(initializer_list_t)
include/json.h:    reference operator+=(initializer_list_t init)
include/json.h:    Inserts elements from initializer list @a ilist before iterator @a pos.
include/json.h:    @param[in] ilist initializer list to insert the values from
include/json.h:    `ilist` is empty
include/json.h:    @complexity Linear in `ilist.size()` plus linear in the distance between
include/json.h:    @liveexample{The example shows how `insert()` is used.,insert__ilist}
include/json.h:    iterator insert(const_iterator pos, initializer_list_t ilist)
include/json.h:        return insert_iterator(pos, ilist.begin(), ilist.end());
include/json.h:    The SAX event lister must follow the interface of @ref json_sax.
include/json.h:    @param[in,out] sax  SAX event listener
include/json.h:    @note If the JSON data contains the binary type, the value stored is a list
include/DFG.h:#include <list>
include/DFG.h:    list<DFGEdge*> m_DFGEdges; 
include/DFG.h:    list<DFGNodeInst*> m_InstNodes;
include/DFG.h:    list<DFGNodeConst*> m_ConstNodes;
include/DFG.h:    list<DFGNodeParam*> m_ParamNodes;
include/CGRANode.h:#include <list>
include/CGRANode.h:		/**the list to record input CGRALinks of this CGRANode
include/CGRANode.h:    list <CGRALink*> m_inLinks;
include/CGRANode.h:		/**the list to record output CGRALinks of this CGRANode
include/CGRANode.h:    list <CGRALink*> m_outLinks;
include/CGRANode.h:		/**add the CGRALink to the list of this CGRANode's InCGRALinks
include/CGRANode.h:		/**add the CGRALink to the list of this CGRANode's outCGRALinks
